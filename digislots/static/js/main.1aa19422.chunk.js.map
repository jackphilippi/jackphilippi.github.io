{"version":3,"sources":["models/Digimon.ts","models/EvolutionRequirements.ts","models/DigimonList.ts","components/DigiSlotMachine.styled.tsx","components/DigiSlotMachine.tsx","index.tsx"],"names":["Level","DigimonName","Digimon","name","level","req","evolutionPath","digimonBonus","EvolutionRequirements","hp","mp","offense","defense","speed","brains","care","weight","discipline","happiness","battles","techs","minCare","minBattles","digimonList","Botamon","Fresh","Koromon","Sukamon","Poyomon","Tokomon","Punimon","Tsunomon","Yuramon","Tanemon","InTraining","Agumon","Gabumon","Kunemon","Palmon","Betamon","Patamon","Biyomon","Elecmon","Penguinmon","Rookie","Greymon","Meramon","Birdramon","Centarumon","Monochromon","Tyrannomon","Numemon","Nanimon","Seadramon","Whamon","Shellmon","Coelamon","Airdramon","Kokatorimon","Unimon","Kabuterimon","Leomon","Angemon","Bakemon","Drimogemon","Ogremon","Garurumon","Kuwagamon","Vegiemon","Ninjamon","Frigimon","Mojyamon","Champion","Megadramon","Phoenixmon","Vademon","Andromon","Devimon","SkullGreymon","Giromon","MegaSeadramon","MetalGreymon","MetalMamemon","Mamemon","HKabuterimon","Piximon","Digitamamon","Monzaemon","Etemon","Ultimate","getDigimon","dn","find","d","getSpecialDigimonInfo","StyledPanes","styled","div","StyledPane","StyledSelect","Form","Select","StyledButton","Button","StyledSettingsButton","FormCheck","Check","StyledIcon","img","InfoCard","Card","StyledInput","Control","DigiSlotMachine","useState","currentDigimon","setCurrentDigimon","rolledDigimon","setRolledDigimon","omitErrors","setOmitErrors","omittedDigimon","setOmittedDigimon","optShowOmitTags","setOptShowOmitTags","bonusText","setBonusText","optShowSpoilers","setOptShowSpoilers","showNaturalBonusText","setShowNaturalBonusText","optShowSpecialDigimon","setOptShowSpecialDigimon","optShowInfoText","setOptShowInfoText","showSettings","setShowSettings","careLabel","setCareLabel","battlesLabel","setBattlesLabel","errorText","setErrorText","rollDigimon","potentialEvolutions","filter","includes","randomDigi","Math","floor","random","length","specialDigiInfo","tableElem","document","getElementById","scrollIntoView","Alert","variant","id","Table","striped","bordered","hover","className","style","width","src","value","onChange","e","target","map","onClick","onClose","dismissible","Heading","type","label","prev","placeholder","onBlur","values","split","badValues","goodValues","trimmed","trim","Object","push","localStorage","setItem","JSON","stringify","handleOmit","join","body","Badge","bg","href","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.1aa19422.chunk.js","sourcesContent":["import EvolutionRequirements from \"./EvolutionRequirements\";\n\nexport enum Level {\n    Fresh,\n    InTraining,\n    Rookie,\n    Champion,\n    Ultimate\n}\n\nexport enum DigimonName {\n    Botamon = \"Botamon\",\n    Poyomon = \"Poyomon\",\n    Punimon = \"Punimon\",\n    Yuramon = \"Yuramon\",\n    Koromon = \"Koromon\",\n    Tanemon = \"Tanemon\",\n    Tokomon = \"Tokomon\",\n    Tsunomon = \"Tsunomon\",\n    Agumon = \"Agumon\",\n    Betamon = \"Betamon\",\n    Biyomon = \"Biyomon\",\n    Elecmon = \"Elecmon\",\n    Gabumon = \"Gabumon\",\n    Kunemon = \"Kunemon\",\n    Palmon = \"Palmon\",\n    Patamon = \"Patamon\",\n    Penguinmon = \"Penguinmon\",\n    Airdramon = \"Airdramon\",\n    Angemon = \"Angemon\",\n    Bakemon = \"Bakemon\",\n    Birdramon = \"Birdramon\",\n    Centarumon = \"Centarumon\",\n    Coelamon = \"Coelamon\",\n    Devimon = \"Devimon\",\n    Drimogemon = \"Drimogemon\",\n    Frigimon = \"Frigimon\",\n    Garurumon = \"Garurumon\",\n    Greymon = \"Greymon\",\n    Kabuterimon = \"Kabuterimon\",\n    Kokatorimon = \"Kokatorimon\",\n    Kuwagamon = \"Kuwagamon\",\n    Leomon = \"Leomon\",\n    Meramon = \"Meramon\",\n    Mojyamon = \"Mojyamon\",\n    Monochromon = \"Monochromon\",\n    Nanimon = \"Nanimon\",\n    Ninjamon = \"Ninjamon\",\n    Numemon = \"Numemon\",\n    Ogremon = \"Ogremon\",\n    Seadramon = \"Seadramon\",\n    Shellmon = \"Shellmon\",\n    Sukamon = \"Sukamon\",\n    Tyrannomon = \"Tyrannomon\",\n    Unimon = \"Unimon\",\n    Vegiemon = \"Vegiemon\",\n    Whamon = \"Whamon\",\n    Andromon = \"Andromon\",\n    Digitamamon = \"Digitamamon\",\n    Etemon = \"Etemon\",\n    Giromon = \"Giromon\",\n    HKabuterimon = \"HKabuterimon\",\n    Mamemon = \"Mamemon\",\n    Megadramon = \"Megadramon\",\n    MegaSeadramon = \"MegaSeadramon\",\n    MetalGreymon = \"MetalGreymon\",\n    MetalMamemon = \"MetalMamemon\",\n    Monzaemon = \"Monzaemon\",\n    Phoenixmon = \"Phoenixmon\",\n    Piximon = \"Piximon\",\n    SkullGreymon = \"SkullGreymon\",\n    Vademon = \"Vademon\",\n}\n\nexport class Digimon {\n    constructor(\n        public readonly name: DigimonName,\n        public readonly level: Level,\n        public readonly req: EvolutionRequirements,\n        public readonly evolutionPath: Array<DigimonName>,\n        public readonly digimonBonus?: DigimonName,\n        ) {\n    }\n}","export default class EvolutionRequirements {\n    constructor(\n        public readonly hp: number,\n        public readonly mp: number,\n        public readonly offense: number,\n        public readonly defense: number,\n        public readonly speed: number,\n        public readonly brains: number,\n        public readonly care: number,\n        public readonly weight: number,\n        public readonly discipline: number,\n        public readonly happiness: number,\n        public readonly battles: number,\n        public readonly techs: number,\n        public readonly minCare: boolean,\n        public readonly minBattles: boolean,\n    ) {\n    }\n}\n","import EvolutionRequirements from \"./EvolutionRequirements\";\nimport { Digimon, DigimonName, Level } from \"./Digimon\";\n\nexport const digimonList = [\n    // Botamon\n    new Digimon(\n        DigimonName.Botamon,\n        Level.Fresh,\n        new EvolutionRequirements(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, false), \n        [DigimonName.Koromon, DigimonName.Sukamon]\n    ),\n    // Poyomon\n    new Digimon(\n        DigimonName.Poyomon,\n        Level.Fresh,\n        new EvolutionRequirements(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, false), \n        [DigimonName.Tokomon, DigimonName.Sukamon]\n    ),\n    // Punimon\n    new Digimon(\n        DigimonName.Punimon,\n        Level.Fresh,\n        new EvolutionRequirements(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, false), \n        [DigimonName.Tsunomon, DigimonName.Sukamon]\n    ),\n    // Yuramon\n    new Digimon(\n        DigimonName.Yuramon,\n        Level.Fresh,\n        new EvolutionRequirements(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, false), \n        [DigimonName.Tanemon, DigimonName.Sukamon]\n    ),\n\n    // Koromon\n    new Digimon(\n        DigimonName.Koromon,\n        Level.InTraining,\n        new EvolutionRequirements(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, false), \n        [DigimonName.Agumon, DigimonName.Gabumon, DigimonName.Kunemon, DigimonName.Sukamon]\n    ),\n    // Tanemon\n    new Digimon(\n        DigimonName.Tanemon,\n        Level.InTraining,\n        new EvolutionRequirements(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, false), \n        [DigimonName.Palmon, DigimonName.Betamon, DigimonName.Kunemon, DigimonName.Sukamon]\n    ),\n    // Tokomon\n    new Digimon(\n        DigimonName.Tokomon,\n        Level.InTraining,\n        new EvolutionRequirements(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, false), \n        [DigimonName.Patamon, DigimonName.Biyomon, DigimonName.Kunemon, DigimonName.Sukamon]\n    ),\n    // Tsunomon\n    new Digimon(\n        DigimonName.Tsunomon,\n        Level.InTraining,\n        new EvolutionRequirements(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, false), \n        [DigimonName.Elecmon, DigimonName.Penguinmon, DigimonName.Kunemon, DigimonName.Sukamon]\n    ),\n    \n    // Agumon\n    new Digimon(\n        DigimonName.Agumon,\n        Level.Rookie,\n        new EvolutionRequirements(0, 1000, 0, 0, 0, 0, 3, 20, 0, 50, 0, 28, false, false), \n        [DigimonName.Greymon, DigimonName.Meramon, DigimonName.Birdramon, DigimonName.Centarumon, DigimonName.Monochromon, DigimonName.Tyrannomon, DigimonName.Numemon, DigimonName.Nanimon, DigimonName.Sukamon]\n    ),\n    // Betamon\n    new Digimon(\n        DigimonName.Betamon,\n        Level.Rookie,\n        new EvolutionRequirements(10, 10, 0, 1, 0, 0, 0, 15, 0, 0, 0, 0, false, false),\n        [DigimonName.Seadramon, DigimonName.Whamon, DigimonName.Shellmon, DigimonName.Coelamon, DigimonName.Numemon, DigimonName.Nanimon, DigimonName.Sukamon],\n        /* Bonus */ DigimonName.Tanemon, \n    ),\n    // Biyomon\n    new Digimon(\n        DigimonName.Biyomon,\n        Level.Rookie,\n        new EvolutionRequirements(0, 10, 0, 1, 1, 0, 0, 15, 0, 0, 0, 0, false, false), \n        [DigimonName.Birdramon, DigimonName.Airdramon, DigimonName.Kokatorimon, DigimonName.Unimon, DigimonName.Kabuterimon, DigimonName.Numemon, DigimonName.Nanimon, DigimonName.Sukamon],\n        /* Bonus */ DigimonName.Tokomon\n    ),\n    // Elecmon\n    new Digimon(\n        DigimonName.Elecmon,\n        Level.Rookie,\n        new EvolutionRequirements(10, 0, 1, 0, 1, 0, 0, 15, 0, 0, 0, 0, false, false), \n        [DigimonName.Leomon, DigimonName.Angemon, DigimonName.Bakemon, DigimonName.Kokatorimon, DigimonName.Numemon, DigimonName.Nanimon, DigimonName.Sukamon],\n        /* Bonus */ DigimonName.Tsunomon\n    ),\n    // Gabumon\n    new Digimon(\n        DigimonName.Gabumon,\n        Level.Rookie,\n        new EvolutionRequirements(0, 0, 0, 1, 1, 1, 0, 15, 0, 0, 0, 0, false, false), \n        [DigimonName.Centarumon, DigimonName.Monochromon, DigimonName.Drimogemon, DigimonName.Tyrannomon, DigimonName.Ogremon, DigimonName.Garurumon, DigimonName.Numemon, DigimonName.Nanimon, DigimonName.Sukamon],\n        /* Bonus */ DigimonName.Koromon\n    ),\n    // Kunemon\n    new Digimon(\n        DigimonName.Kunemon,\n        Level.Rookie,\n        new EvolutionRequirements(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, false), \n        [DigimonName.Bakemon, DigimonName.Kabuterimon, DigimonName.Kuwagamon, DigimonName.Vegiemon, DigimonName.Numemon, DigimonName.Nanimon, DigimonName.Sukamon]\n    ),\n    // Palmon\n    new Digimon(\n        DigimonName.Palmon,\n        Level.Rookie,\n        new EvolutionRequirements(0, 10, 0, 0, 1, 1, 0, 15, 0, 0, 0, 0, false, false), \n        [DigimonName.Kuwagamon, DigimonName.Vegiemon, DigimonName.Ninjamon, DigimonName.Whamon, DigimonName.Coelamon, DigimonName.Numemon, DigimonName.Nanimon, DigimonName.Sukamon],\n        /* Bonus */ DigimonName.Tanemon\n    ),\n    // Patamon\n    new Digimon(\n        DigimonName.Patamon,\n        Level.Rookie,\n        new EvolutionRequirements(10, 0, 1, 0, 0, 1, 0, 15, 0, 0, 0, 0, false, false), \n        [DigimonName.Drimogemon, DigimonName.Tyrannomon, DigimonName.Ogremon, DigimonName.Leomon, DigimonName.Angemon, DigimonName.Unimon, DigimonName.Numemon, DigimonName.Nanimon, DigimonName.Sukamon],\n        /* Bonus */ DigimonName.Tokomon\n    ),\n    // Penguinmon\n    new Digimon(\n        DigimonName.Penguinmon,\n        Level.Rookie,\n        new EvolutionRequirements(0, 10, 0, 1, 0, 1, 0, 15, 0, 0, 0, 0, false, false), \n        [DigimonName.Whamon, DigimonName.Shellmon, DigimonName.Garurumon, DigimonName.Frigimon, DigimonName.Mojyamon, DigimonName.Numemon, DigimonName.Nanimon, DigimonName.Sukamon],\n        /* Bonus */ DigimonName.Tsunomon\n    ),\n    // Airdramon\n    new Digimon(\n        DigimonName.Airdramon,\n        Level.Champion,\n        new EvolutionRequirements(10, 10, 1, 0, 0, 0, 0, 15, 0, 0, 0, 0, false, false), \n        [DigimonName.Megadramon, DigimonName.Phoenixmon, DigimonName.Vademon, DigimonName.Sukamon],\n        /* Bonus */ DigimonName.Koromon\n    ),\n    // Angemon\n    new Digimon(\n        DigimonName.Angemon,\n        Level.Champion,\n        new EvolutionRequirements(2000, 4000, 200, 400, 200, 400, 5, 40, 95, 0, 30, 30, true, false), \n        [DigimonName.Andromon, DigimonName.Phoenixmon, DigimonName.Devimon, DigimonName.Vademon, DigimonName.Sukamon]\n    ),\n    // Bakemon\n    new Digimon(\n        DigimonName.Bakemon,\n        Level.Champion,\n        new EvolutionRequirements(0, 1000, 0, 0, 0, 100, 0, 20, 0, 0, 0, 35, true, false), \n        [DigimonName.SkullGreymon, DigimonName.Giromon, DigimonName.Vademon, DigimonName.Sukamon],\n        /* Bonus */ DigimonName.Patamon\n    ),\n    // Birdramon\n    new Digimon(\n        DigimonName.Birdramon,\n        Level.Champion,\n        new EvolutionRequirements(0, 0, 0, 0, 100, 0, 3, 20, 0, 0, 0, 35, false, false), \n        [DigimonName.Phoenixmon, DigimonName.Vademon, DigimonName.Sukamon],\n        /* Bonus */ DigimonName.Biyomon\n    ),\n    // Centarumon\n    new Digimon(\n        DigimonName.Centarumon,\n        Level.Champion,\n        new EvolutionRequirements(0, 0, 0, 0, 0, 100, 3, 30, 60, 0, 0, 28, true, false), \n        [DigimonName.Andromon, DigimonName.Giromon, DigimonName.Vademon, DigimonName.Sukamon]\n    ),\n    // Coelamon\n    new Digimon(\n        DigimonName.Coelamon,\n        Level.Champion,\n        new EvolutionRequirements(0, 0, 0, 100, 0, 0, 3, 30, 0, 0, 5, 35, false, true), \n        [DigimonName.MegaSeadramon, DigimonName.Vademon, DigimonName.Sukamon]\n    ),\n    // Devimon\n    new Digimon(\n        DigimonName.Devimon,\n        Level.Champion,\n        new EvolutionRequirements(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, false), \n        [DigimonName.SkullGreymon, DigimonName.Megadramon, DigimonName.Vademon, DigimonName.Sukamon]\n    ),\n    // Drimogemon\n    new Digimon(\n        DigimonName.Drimogemon,\n        Level.Champion,\n        new EvolutionRequirements(0, 0, 100, 0, 0, 0, 3, 40, 0, 50, 0, 28, false, false), \n        [DigimonName.MetalGreymon, DigimonName.Vademon, DigimonName.Sukamon]\n    ),\n    // Frigimon\n    new Digimon(\n        DigimonName.Frigimon,\n        Level.Champion,\n        new EvolutionRequirements(0, 1000, 0, 0, 0, 100, 5, 30, 0, 50, 0, 28, true, false), \n        [DigimonName.MetalMamemon, DigimonName.Mamemon, DigimonName.Vademon, DigimonName.Sukamon]\n    ),\n    // Garurumon\n    new Digimon(\n        DigimonName.Garurumon,\n        Level.Champion,\n        new EvolutionRequirements(0, 1000, 0, 0, 100, 0, 1, 30, 90, 0, 0, 28, true, false), \n        [DigimonName.SkullGreymon, DigimonName.MegaSeadramon, DigimonName.Vademon, DigimonName.Sukamon]\n    ),\n    // Greymon\n    new Digimon(\n        DigimonName.Greymon,\n        Level.Champion,\n        new EvolutionRequirements(0, 0, 100, 100, 100, 100, 1, 30, 90, 0, 0, 35, true, false), \n        [DigimonName.MetalGreymon, DigimonName.SkullGreymon, DigimonName.Vademon, DigimonName.Sukamon]\n    ),\n    // Kabuterimon\n    new Digimon(\n        DigimonName.Kabuterimon,\n        Level.Champion,\n        new EvolutionRequirements(1000, 1000, 100, 0, 100, 0, 1, 30, 0, 0, 0, 35, true, false), \n        [DigimonName.HKabuterimon, DigimonName.MetalMamemon, DigimonName.Vademon, DigimonName.Sukamon],\n        /* Bonus */ DigimonName.Kunemon\n    ),\n    // Kokatorimon\n    new Digimon(\n        DigimonName.Kokatorimon,\n        Level.Champion,\n        new EvolutionRequirements(1000, 0, 0, 0, 0, 0, 3, 30, 0, 0, 0, 28, false, false), \n        [DigimonName.Phoenixmon, DigimonName.Piximon, DigimonName.Vademon, DigimonName.Sukamon],\n        /* Bonus */ DigimonName.Biyomon\n    ),\n    // Kuwagamon\n    new Digimon(\n        DigimonName.Kuwagamon,\n        Level.Champion,\n        new EvolutionRequirements(1000, 1000, 100, 0, 100, 0, 5, 30, 0, 0, 0, 28, false, false), \n        [DigimonName.HKabuterimon, DigimonName.Piximon, DigimonName.Vademon, DigimonName.Sukamon],\n        /* Bonus */ DigimonName.Kunemon // Requires \n    ),\n    // Leomon\n    new Digimon(\n        DigimonName.Leomon,\n        Level.Champion,\n        new EvolutionRequirements(0, 0, 100, 0, 100, 100, 1, 20, 0, 0, 10, 35, true, false), \n        [DigimonName.Andromon, DigimonName.Mamemon, DigimonName.Vademon, DigimonName.Sukamon]\n    ),\n    // Meramon\n    new Digimon(\n        DigimonName.Meramon,\n        Level.Champion,\n        new EvolutionRequirements(0, 0, 100, 0, 0, 0, 5, 20, 0, 0, 10, 28, false, false), \n        [DigimonName.MetalGreymon, DigimonName.Andromon, DigimonName.Vademon, DigimonName.Sukamon]\n    ),\n    // Mojyamon\n    new Digimon(\n        DigimonName.Mojyamon,\n        Level.Champion,\n        new EvolutionRequirements(1000, 0, 0, 0, 0, 0, 5, 20, 0, 0, 5, 28, false, true), \n        [DigimonName.SkullGreymon, DigimonName.Mamemon, DigimonName.Vademon, DigimonName.Sukamon]\n    ),\n    // Monochromon\n    new Digimon(\n        DigimonName.Monochromon,\n        Level.Champion,\n        new EvolutionRequirements(1000, 0, 0, 100, 0, 100, 3, 40, 0, 0, 5, 35, true, true), \n        [DigimonName.MetalGreymon, DigimonName.MetalMamemon, DigimonName.Vademon, DigimonName.Sukamon]\n    ),\n    // Nanimon\n    new Digimon(\n        DigimonName.Nanimon,\n        Level.Champion,\n        new EvolutionRequirements(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, false), \n        [DigimonName.Digitamamon, DigimonName.Vademon, DigimonName.Sukamon]\n    ),\n    // Ninjamon\n    new Digimon(\n        DigimonName.Ninjamon,\n        Level.Champion,\n        new EvolutionRequirements(0, 1000, 100, 0, 100, 0, 1, 10, 0, 0, 15, 35, true, false), \n        [DigimonName.Piximon, DigimonName.MetalMamemon, DigimonName.Mamemon, DigimonName.Vademon, DigimonName.Sukamon]\n    ),\n    // Numemon\n    new Digimon(\n        DigimonName.Numemon,\n        Level.Champion,\n        new EvolutionRequirements(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, false), \n        [DigimonName.Monzaemon, DigimonName.Vademon, DigimonName.Sukamon]\n    ),\n    // Ogremon\n    new Digimon(\n        DigimonName.Ogremon,\n        Level.Champion,\n        new EvolutionRequirements(1000, 0, 100, 0, 0, 0, 5, 30, 0, 0, 15, 35, false, false), \n        [DigimonName.Andromon, DigimonName.Giromon, DigimonName.Vademon, DigimonName.Sukamon]\n    ),\n    // Seadramon\n    new Digimon(\n        DigimonName.Seadramon,\n        Level.Champion,\n        new EvolutionRequirements(1000, 1000, 0, 0, 0, 0, 3, 30, 0, 0, 5, 28, false, true), \n        [DigimonName.Megadramon, DigimonName.MegaSeadramon, DigimonName.Vademon, DigimonName.Sukamon]\n    ),\n    // Shellmon\n    new Digimon(\n        DigimonName.Shellmon,\n        Level.Champion,\n        new EvolutionRequirements(1000, 0, 0, 100, 0, 0, 5, 40, 0, 0, 0, 35, false, false), \n        [DigimonName.HKabuterimon, DigimonName.MegaSeadramon, DigimonName.Vademon, DigimonName.Sukamon],\n        /* Bonus */ DigimonName.Betamon // Betamon requires the extra bonus stats\n    ),\n    // Sukamon\n    new Digimon(\n        DigimonName.Sukamon,\n        Level.Champion,\n        new EvolutionRequirements(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, false), \n        [DigimonName.Etemon, DigimonName.Vademon]\n    ),\n    // Tyrannomon\n    new Digimon(\n        DigimonName.Tyrannomon,\n        Level.Champion,\n        new EvolutionRequirements(1000, 0, 0, 100, 0, 0, 5, 30, 0, 0, 5, 28, true, true), \n        [DigimonName.MetalGreymon, DigimonName.Megadramon, DigimonName.Vademon, DigimonName.Sukamon]\n    ),\n    // Unimon\n    new Digimon(\n        DigimonName.Unimon,\n        Level.Champion,\n        new EvolutionRequirements(1000, 0, 0, 0, 100, 0, 3, 30, 0, 0, 10, 35, true, false), \n        [DigimonName.Giromon, DigimonName.Phoenixmon, DigimonName.Vademon, DigimonName.Sukamon]\n    ),\n    // Vegiemon\n    new Digimon(\n        DigimonName.Vegiemon,\n        Level.Champion,\n        new EvolutionRequirements(0, 1000, 0, 0, 0, 0, 5, 10, 0, 50, 0, 21, false, false), \n        [DigimonName.Piximon, DigimonName.Vademon, DigimonName.Sukamon]\n    ),\n    // Whamon\n    new Digimon(\n        DigimonName.Whamon,\n        Level.Champion,\n        new EvolutionRequirements(1000, 0, 0, 0, 0, 100, 5, 40, 60, 0, 0, 28, true, false), \n        [DigimonName.MegaSeadramon, DigimonName.Mamemon, DigimonName.Vademon, DigimonName.Sukamon]\n    ),\n    \n    // Andromon\n    new Digimon(\n        DigimonName.Andromon,\n        Level.Ultimate,\n        new EvolutionRequirements(0, 1000, 0, 0, 100, 100, 1, 30, 90, 0, 0, 35, true, false), \n        [DigimonName.Sukamon]\n    ),\n    // Digitamamon\n    new Digimon(\n        DigimonName.Digitamamon,\n        Level.Ultimate,\n        new EvolutionRequirements(3000, 3000, 400, 400, 400, 300, 0, 10, 0, 0, 100, 49, true, false), \n        [DigimonName.Sukamon]\n    ),\n    // Etemon\n    new Digimon(\n        DigimonName.Etemon,\n        Level.Ultimate,\n        new EvolutionRequirements(2000, 3000, 400, 200, 400, 300, 0, 15, 0, 0, 50, 49, true, false), \n        []\n    ),\n    // Giromon\n    new Digimon(\n        DigimonName.Giromon,\n        Level.Ultimate,\n        new EvolutionRequirements(0, 0, 400, 0, 300, 400, 15, 5, 0, 95, 100, 35, false, false), \n        [DigimonName.Sukamon]\n    ),\n    // HKabuterimon\n    new Digimon(\n        DigimonName.HKabuterimon,\n        Level.Ultimate,\n        new EvolutionRequirements(7000, 0, 400, 600, 400, 0, 5, 55, 0, 0, 0, 40, true, true), \n        [DigimonName.Sukamon]\n    ),\n    // Mamemon\n    new Digimon(\n        DigimonName.Mamemon,\n        Level.Ultimate,\n        new EvolutionRequirements(0, 0, 400, 300, 300, 400, 15, 5, 0, 90, 0, 25, false, false), \n        [DigimonName.Sukamon]\n    ),\n    // Megadramon\n    new Digimon(\n        DigimonName.Megadramon,\n        Level.Ultimate,\n        new EvolutionRequirements(3000, 5000, 500, 300, 400, 400, 10, 55, 0, 0, 30, 30, true, false), \n        [DigimonName.Sukamon]\n    ),\n    // MegaSeadramon\n    new Digimon(\n        DigimonName.MegaSeadramon,\n        Level.Ultimate,\n        new EvolutionRequirements(0, 4000, 500, 400, 0, 400, 5, 30, 0, 0, 0, 40, true, true), \n        [DigimonName.Sukamon]\n    ),\n    // MetalGreymon\n    new Digimon(\n        DigimonName.MetalGreymon,\n        Level.Ultimate,\n        new EvolutionRequirements(4000, 3000, 500, 500, 300, 300, 10, 65, 95, 0, 30, 30, true, false), \n        [DigimonName.Sukamon]\n    ),\n    // MetalMamemon\n    new Digimon(\n        DigimonName.MetalMamemon,\n        Level.Ultimate,\n        new EvolutionRequirements(0, 0, 500, 400, 400, 400, 15, 10, 0, 95, 0, 30, true, false), \n        [DigimonName.Sukamon]\n    ),\n    // Monzaemon\n    new Digimon(\n        DigimonName.Monzaemon,\n        Level.Ultimate,\n        new EvolutionRequirements(3000, 3000, 300, 300, 300, 300, 0, 40, 0, 0, 50, 49, true, false), \n        [DigimonName.Sukamon]\n    ),\n    // Phoenixmon\n    new Digimon(\n        DigimonName.Phoenixmon,\n        Level.Ultimate,\n        new EvolutionRequirements(4000, 4000, 0, 0, 400, 600, 3, 30, 100, 0, 0, 40, true, true), \n        [DigimonName.Sukamon]\n    ),\n    // Piximon\n    new Digimon(\n        DigimonName.Piximon,\n        Level.Ultimate,\n        new EvolutionRequirements(0, 0, 300, 300, 400, 400, 15, 5, 0, 95, 0, 25, false, false), \n        [DigimonName.Sukamon]\n    ),\n    // SkullGreymon\n    new Digimon(\n        DigimonName.SkullGreymon,\n        Level.Ultimate,\n        new EvolutionRequirements(4000, 6000, 400, 400, 200, 500, 10, 30, 0, 0, 40, 45, false, false), \n        [DigimonName.Sukamon]\n    ),\n    // Vademon\n    new Digimon(\n        DigimonName.Vademon,\n        Level.Ultimate,\n        new EvolutionRequirements(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, false), \n        []\n    ),\n]\n\nexport function getDigimon(dn: DigimonName) { \n    return digimonList.find(d => d.name === dn) as Digimon;\n}\n\nexport const getSpecialDigimonInfo = (dn: DigimonName) => {\n    switch(dn) {\n        case DigimonName.Devimon:\n            return \"Lose a battle with your Angemon while having less than 50% discipline and you'll have a chance to evolve into this digimon.\";\n        case DigimonName.Numemon:\n            return \"Make sure you don't meet the requirements for any other digimon and you'll evolve into this digimon after 96h on the Rookie level.\";\n        case DigimonName.Sukamon:\n            return \"Fill your virus bar by allowing your digimon to poop on the ground.\";\n        case DigimonName.Nanimon:\n            return \"Bring happiness and discipline to 0 and scold your Digimon. The easiest way to do so is praising/scolding and then reducing the last bit of discipline by overfeeding. The fly/flower condition will increase your happiness and prevents you from getting this evolution!\";\n        case DigimonName.Vademon:\n            return \"Make sure you don't meet the requirements for any other digimon and you can evolve into this digimon when praising/scolding your Digimon after 240h on the Champion level.\";\n        case DigimonName.Kunemon:\n            return `Sleep in the \"Kunemon's\" Bed area and you'll have a chance to evolve into this digimon.`  \n        default:\n            return false;\n    }\n};\n","import styled from \"styled-components\";\r\nimport { Button, Form, Card }  from 'react-bootstrap';\r\n\r\nexport const StyledPanes = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n\r\n    @media screen and (max-width: 768px) {\r\n        flex-direction: column;\r\n    }\r\n`;\r\n\r\nexport const StyledPane = styled.div`\r\n    flex: 50%;\r\n    padding: 10px;\r\n`;\r\n\r\nexport const StyledSelect = styled(Form.Select)`\r\n    width: auto;\r\n    display: inline-block;\r\n    margin-bottom: 20px;\r\n\r\n    @media screen and (max-width: 768px) {\r\n        width: 70%;\r\n    }\r\n`;\r\n\r\nexport const StyledButton = styled(Button)`\r\n    margin-top: -5px;\r\n    margin-left: 10px;\r\n`;\r\n\r\nexport const StyledSettingsButton = styled(Button)`\r\n    display: block;\r\n`;\r\n\r\nexport const FormCheck = styled(Form.Check)`\r\n    cursor: pointer;\r\n    -webkit-touch-callout: none;\r\n    -webkit-user-select: none;\r\n    -khtml-user-select: none;\r\n    -moz-user-select: none;\r\n    -ms-user-select: none;\r\n    user-select: none; \r\n    & input {\r\n        cursor: pointer;\r\n    }\r\n`;\r\n\r\nexport const StyledIcon = styled.img`\r\n    image-rendering: pixelated;\r\n    image-rendering: -moz-crisp-edges;\r\n    image-rendering: crisp-edges;\r\n    width: 32px;\r\n`;\r\n\r\nexport const InfoCard = styled(Card)`\r\n    margin-top: 30px;\r\n`;\r\n\r\nexport const StyledInput = styled(Form.Control)`\r\n    margin: 10px auto;\r\n`;","import { useState } from \"react\";\nimport { Digimon, DigimonName, Level } from \"../models/Digimon\";\nimport { digimonList, getDigimon, getSpecialDigimonInfo } from \"../models/DigimonList\";\nimport { Table, Alert, Badge }  from 'react-bootstrap';\nimport { FormCheck, InfoCard, StyledButton, StyledIcon, StyledInput, StyledPane, StyledPanes, StyledSelect, StyledSettingsButton } from './DigiSlotMachine.styled';\n\nexport default function DigiSlotMachine() {const [currentDigimon, setCurrentDigimon] = useState<Digimon>(getDigimon(DigimonName.Agumon)!);\n    const [rolledDigimon, setRolledDigimon] = useState<Digimon>();\n\n    const [omitErrors, setOmitErrors] = useState<Array<string>>([]);\n    const [omittedDigimon, setOmittedDigimon] = useState<Array<DigimonName>>([]);\n    const [optShowOmitTags, setOptShowOmitTags] = useState(false);\n\n    const [bonusText, setBonusText] = useState<string>('');\n    const [optShowSpoilers, setOptShowSpoilers] = useState(false);\n    const [showNaturalBonusText, setShowNaturalBonusText] = useState(false);\n    const [optShowSpecialDigimon, setOptShowSpecialDigimon] = useState(false);\n    const [optShowInfoText, setOptShowInfoText] = useState(true);\n    \n    const [showSettings, setShowSettings] = useState(true);\n\n    const [careLabel, setCareLabel] = useState<string>('');\n    const [battlesLabel, setBattlesLabel] = useState<string>('');\n    const [errorText, setErrorText] = useState<string>('');\n\n    function setDefaults() {\n        setBonusText('');\n        setBattlesLabel('');\n        setCareLabel('');\n        setErrorText('');\n        setShowNaturalBonusText(false);\n    }\n\n    function rollDigimon(currentDigimon: Digimon) {\n        // Clear all transient labels\n        setDefaults();\n\n        // Filter out only the allowed evolustions\n        // Also, ignore special evos (numemon, sukamon) if it's toggled off\n        const potentialEvolutions = digimonList\n            .filter(dn => {\n                // Return false if specials are disabled and it's a special digi\n                if (!optShowSpecialDigimon && getSpecialDigimonInfo(dn.name)) {\n                    return false;\n                }\n                // Return false if digimon is specifically omitted\n                if (omittedDigimon.includes(dn.name)) {\n                    return false;\n                }\n                // Otherwise return true if it's a valid evolution\n                return currentDigimon.evolutionPath.includes(dn.name);\n            });\n\n        // Get a random digimon from the list of valid evolutions\n        const randomDigi = potentialEvolutions[Math.floor(Math.random()*potentialEvolutions.length)];\n        if (!randomDigi) { \n            return setErrorText('There are no possible evolutions for that digimon! You may need to refine your settings.');\n        }\n        setRolledDigimon(randomDigi);\n        \n        // If the rolled digimon has special bonus conditions, let the user know\n        if (randomDigi.digimonBonus === currentDigimon.name) {\n            setShowNaturalBonusText(true);\n        }\n        \n        // If the rolled digimon is a \"special\" digimon, let them know how to evolve into it\n        const specialDigiInfo = getSpecialDigimonInfo(randomDigi.name);\n        if (specialDigiInfo) {\n            setBonusText(`This is a special digimon. ${specialDigiInfo}`);\n        }\n\n        if (randomDigi.req.battles > 0) {\n            setBattlesLabel(randomDigi.req.minBattles ? '≤' : '≥');\n        }\n\n        if (randomDigi.req.care > 0) {\n            // Set labels for the FE\n            setCareLabel(randomDigi.req.minCare ? '≤' : '≥');\n        }\n\n        const tableElem = document.getElementById('table-heading');\n        tableElem?.scrollIntoView();\n    }\n\n    function handleOmit(value: string) {\n        const values = value.split(',');\n        const badValues = [];\n        const goodValues = [];\n\n        for (const digi of values) {\n            const trimmed = digi.trim() as DigimonName;\n            if (!trimmed) continue;\n            if (!Object.values(DigimonName).includes(trimmed)) {\n                badValues.push(trimmed);\n            } else {\n                goodValues.push(trimmed);\n            }\n        }\n        if (badValues) {\n            // There was a problem parsing the string of omissions from the user\n            setOmitErrors(badValues);\n        }\n        // Acknowledge the good ones regardless\n        localStorage.setItem('omittedDigimon', JSON.stringify(goodValues));\n        setOmittedDigimon(goodValues);\n    }\n\n    // TODO: Sort the rows and push empty values to the bottom\n    // TODO: Hover over stats for details\n    return <StyledPanes>\n        <StyledPane>\n            {bonusText.length > 0 && <Alert variant=\"info\">{bonusText}</Alert>}\n            {rolledDigimon ? <>\n                <h2 id=\"table-heading\">Target Digivolution Criteria</h2>\n                {showNaturalBonusText && (\n                    <Alert variant=\"warning\">\n                        {currentDigimon.name} gets a free natural bonus point towards this digivolution!\n                    </Alert>\n                )}\n                <p>The following table shows the required attributes that your digimon needs to meet in order to digivolve into the selected digimon.</p>\n                <Table striped bordered hover>\n                    <tbody>\n                        <tr className='table-secondary'><th style={{ width: '30%' }}>Name</th><td style={{ width: '70%' }}>{optShowSpoilers ? <>{rolledDigimon?.name} <StyledIcon src={`./imgs/${rolledDigimon.name}.png`}/></> : '???'}</td></tr>\n                        <tr className='table-secondary'><th>Level</th><td>{Level[rolledDigimon.level] || '-'}</td></tr>\n                        <tr className='table-info'><th>HP</th><td>{rolledDigimon.req.hp || '-'}</td></tr>\n                        <tr className='table-info'><th>MP</th><td>{rolledDigimon.req.mp || '-'}</td></tr>\n                        <tr className='table-info'><th>OFFENSE</th><td>{rolledDigimon.req.offense || '-'}</td></tr>\n                        <tr className='table-info'><th>DEFENSE</th><td>{rolledDigimon.req.defense || '-'}</td></tr>\n                        <tr className='table-info'><th>SPEED</th><td>{rolledDigimon.req.speed || '-'}</td></tr>\n                        <tr className='table-info'><th>BRAINS</th><td>{rolledDigimon.req.brains || '-'}</td></tr>\n                        <tr className='table-primary'><th>CARE MISTAKES</th><td>{careLabel}{rolledDigimon.req.care || '-'}</td></tr>\n                        <tr className='table-danger'><th>WEIGHT</th><td>{rolledDigimon.req.weight || '-'}</td></tr>\n                        <tr className='table-warning'><th>DISCIPLINE</th><td>{rolledDigimon.req.discipline || '-'}</td></tr>\n                        <tr className='table-warning'><th>HAPPINESS</th><td>{rolledDigimon.req.happiness || '-'}</td></tr>\n                        <tr className='table-warning'><th>BATTLES</th><td>{battlesLabel}{rolledDigimon.req.battles || '-'}</td></tr>\n                        <tr className='table-warning'><th>TECHS</th><td>{rolledDigimon.req.techs || '-'}</td></tr>\n                        {rolledDigimon.digimonBonus === currentDigimon.name && <tr className='table-warning'><th>DIGIMON BONUS</th><td>{rolledDigimon.digimonBonus}</td></tr>}\n                    </tbody>\n                </Table>\n            </> : <p className={'text-info'}>Click the Roll button to receive a random digimon's evolution targets</p>}\n        </StyledPane>\n        <StyledPane>\n            <h2>Your current Digimon: {currentDigimon && <StyledIcon src={`./imgs/${currentDigimon.name}.png`}/>}</h2>\n            <StyledSelect name=\"evolutions\" value={currentDigimon.name} onChange={(e: any) => setCurrentDigimon(getDigimon(e.target.value as unknown as DigimonName))}>\n                {digimonList.map(d => <option key={d.name} value={d.name}>{Level[d.level]} - {d.name}</option>)}\n            </StyledSelect>\n            <StyledButton variant=\"primary\" onClick={() => rollDigimon(currentDigimon)}>Roll!</StyledButton> \n            {errorText && <p className='text-danger'>{errorText}</p>}\n            {!showSettings && <StyledSettingsButton variant=\"secondary\" onClick={() => setShowSettings(true)}>⚙ Show settings</StyledSettingsButton>}\n            {showSettings && <Alert variant=\"secondary\" onClose={() => setShowSettings(false)} dismissible>\n                <Alert.Heading>Settings</Alert.Heading>\n\n                <FormCheck \n                    type=\"switch\"\n                    id=\"specials-switch\"\n                    label=\"Show special digimon evolutions (eg. Numemon)\"\n                    value={optShowSpecialDigimon}\n                    onClick={() => setOptShowSpecialDigimon(prev => !prev)}\n                />\n                <FormCheck \n                    type=\"switch\"\n                    id=\"omit-switch\"\n                    label=\"Exclude one or more digimon from the results\"\n                    value={optShowOmitTags}\n                    onClick={() => setOptShowOmitTags(prev => !prev)}\n                />\n                {optShowOmitTags && <>\n                    <StyledInput\n                        type=\"input\"\n                        placeholder=\"eg. Palmon, HKabuterimon (comma-separated)\"\n                        onBlur={(e: any) => handleOmit(e.target.value)} />\n                    {omitErrors.length > 0 && <p className='text-danger'>Unable to exclude the following digimon. Are they spelled correctly?: {omitErrors.join(', ')}</p>}\n                    {omittedDigimon.length > 0 && <p className='text-success'>Excluding the following digimon from results: {omittedDigimon.join(', ')}</p>}\n                </>}\n                <FormCheck \n                    type=\"switch\"\n                    id=\"help-switch\"\n                    label=\"Show info text\"\n                    value={optShowInfoText}\n                    onClick={() => setOptShowInfoText(prev => !prev)}\n                />\n                <hr/>\n                <FormCheck \n                    type=\"switch\"\n                    id=\"spoilers-switch\"\n                    label=\"Show target digimon name details (spoilers!)\"\n                    value={optShowSpoilers}\n                    onClick={() => setOptShowSpoilers(prev => !prev)}\n                />\n            </Alert>}\n            {optShowInfoText && <InfoCard variant=\"secondary\" body>\n                <h2>What?</h2>\n                <p>This tool randomly selects a digimon for you to try and digivolve into, but doesn't tell you what that digimon will be.</p>\n                <h2>Why?</h2>\n                <p>Digimon World 1 is an infamously challenging game which doesn't share much about its inner workings. In the case of digivolution, it can be exhausting and time-consuming getting the same awful digimon over and over again.</p>\n                <p>This tool was created to help make the experience of playing the game a little bit more enjoyable, whilst retaining the fun and excitement amount of surprise of getting a new digimon.</p>\n                <h2>How?</h2>\n                <ul>\n                    <li>\n                        Digivolution outcomes are affected by four different criteria:\n                        <ul>\n                            <li><Badge bg=\"info\">Stats</Badge></li>\n                            <li><Badge bg=\"primary\">Care Mistakes</Badge></li>\n                            <li><Badge bg=\"danger\">Weight</Badge></li>\n                            <li><Badge bg=\"warning\">Bonus Criteria</Badge></li>\n                        </ul>\n                    </li>\n                    <li>3 must be met to be eligible for the evolution</li>\n                    <li>Some Digimon have a natural advantage to evolve into a certain Digimon by always fulfilling the bonus requirement for free</li>\n                </ul>\n                <p>In-depth information about evolution within Digimon World can be found <a href=\"https://gamefaqs.gamespot.com/ps/913684-digimon-world/faqs/73845\"> here</a>, with thanks to <a href=\"https://twitter.com/sydmontague\">SydMontague</a> for the research that made this tool possible</p>\n            </InfoCard>}\n        </StyledPane>\n        \n    </StyledPanes>;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport DigiSlotMachine from './components/DigiSlotMachine';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <div className=\"App\">\n      <h1 className='display-4'>Digimon World 1 Evolution Slot Machine</h1>\n      <p className='lead'>Hit the button and you'll be provided the criteria for digivolving your digimon into another randomly selected digimon.</p>\n      <DigiSlotMachine />\n    </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}