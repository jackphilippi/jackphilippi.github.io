{"version":3,"sources":["models/Digimon.ts","models/EvolutionRequirements.ts","models/DigimonList.ts","components/DigiSlotMachine.tsx","index.tsx"],"names":["Level","DigimonName","Digimon","name","level","evolutionRequirements","evolutionPath","digimonBonus","EvolutionRequirements","hp","mp","offense","defense","speed","brains","care","weight","discipline","happiness","battles","techs","minCare","minBattles","digimonList","Botamon","Fresh","Koromon","Sukamon","Poyomon","Tokomon","Punimon","Tsunomon","Yuramon","Tanemon","InTraining","Agumon","Gabumon","Kunemon","Palmon","Betamon","Patamon","Biyomon","Elecmon","Penguinmon","Rookie","Greymon","Meramon","Birdramon","Centarumon","Monochromon","Tyrannomon","Numemon","Nanimon","Seadramon","Whamon","Shellmon","Coelamon","Airdramon","Kokatorimon","Unimon","Kabuterimon","Leomon","Angemon","Bakemon","Drimogemon","Ogremon","Garurumon","Kuwagamon","Vegiemon","Ninjamon","Frigimon","Mojyamon","Champion","Megadramon","Phoenixmon","Vademon","Andromon","Devimon","SkullGreymon","Giromon","MegaSeadramon","MetalGreymon","MetalMamemon","Mamemon","HKabuterimon","Piximon","Digitamamon","Monzaemon","Etemon","Ultimate","getDigimon","dn","find","d","StyledTable","styled","Table","StyledSelect","Form","Select","StyledButton","Button","FormCheck","Check","DigiSlotMachine","useState","rolledDigimon","setRolledDigimon","currentDigimon","setCurrentDigimon","bonusText","setBonusText","showBonusDigimonText","setShowBonusDigimonText","showSpoilers","setShowSpoilers","rollDigimon","potentialEvolutions","filter","includes","randomDigi","Math","floor","random","length","bonusTxt","push","specialDigiInfo","getSpecialDigimonInfo","console","log","value","onChange","e","target","map","digi","variant","onClick","Alert","striped","bordered","hover","style","width","className","type","id","label","prev","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.40e207d6.chunk.js","sourcesContent":["import EvolutionRequirements from \"./EvolutionRequirements\";\r\n\r\nexport enum Level {\r\n    Fresh,\r\n    InTraining,\r\n    Rookie,\r\n    Champion,\r\n    Ultimate\r\n}\r\n\r\nexport const enum DigimonName {\r\n    Botamon = \"Botamon\",\r\n    Poyomon = \"Poyomon\",\r\n    Punimon = \"Punimon\",\r\n    Yuramon = \"Yuramon\",\r\n    Koromon = \"Koromon\",\r\n    Tanemon = \"Tanemon\",\r\n    Tokomon = \"Tokomon\",\r\n    Tsunomon = \"Tsunomon\",\r\n    Agumon = \"Agumon\",\r\n    Betamon = \"Betamon\",\r\n    Biyomon = \"Biyomon\",\r\n    Elecmon = \"Elecmon\",\r\n    Gabumon = \"Gabumon\",\r\n    Kunemon = \"Kunemon\",\r\n    Palmon = \"Palmon\",\r\n    Patamon = \"Patamon\",\r\n    Penguinmon = \"Penguinmon\",\r\n    Airdramon = \"Airdramon\",\r\n    Angemon = \"Angemon\",\r\n    Bakemon = \"Bakemon\",\r\n    Birdramon = \"Birdramon\",\r\n    Centarumon = \"Centarumon\",\r\n    Coelamon = \"Coelamon\",\r\n    Devimon = \"Devimon\",\r\n    Drimogemon = \"Drimogemon\",\r\n    Frigimon = \"Frigimon\",\r\n    Garurumon = \"Garurumon\",\r\n    Greymon = \"Greymon\",\r\n    Kabuterimon = \"Kabuterimon\",\r\n    Kokatorimon = \"Kokatorimon\",\r\n    Kuwagamon = \"Kuwagamon\",\r\n    Leomon = \"Leomon\",\r\n    Meramon = \"Meramon\",\r\n    Mojyamon = \"Mojyamon\",\r\n    Monochromon = \"Monochromon\",\r\n    Nanimon = \"Nanimon\",\r\n    Ninjamon = \"Ninjamon\",\r\n    Numemon = \"Numemon\",\r\n    Ogremon = \"Ogremon\",\r\n    Seadramon = \"Seadramon\",\r\n    Shellmon = \"Shellmon\",\r\n    Sukamon = \"Sukamon\",\r\n    Tyrannomon = \"Tyrannomon\",\r\n    Unimon = \"Unimon\",\r\n    Vegiemon = \"Vegiemon\",\r\n    Whamon = \"Whamon\",\r\n    Andromon = \"Andromon\",\r\n    Digitamamon = \"Digitamamon\",\r\n    Etemon = \"Etemon\",\r\n    Giromon = \"Giromon\",\r\n    HKabuterimon = \"HKabuterimon\",\r\n    Mamemon = \"Mamemon\",\r\n    Megadramon = \"Megadramon\",\r\n    MegaSeadramon = \"MegaSeadramon\",\r\n    MetalGreymon = \"MetalGreymon\",\r\n    MetalMamemon = \"MetalMamemon\",\r\n    Monzaemon = \"Monzaemon\",\r\n    Phoenixmon = \"Phoenixmon\",\r\n    Piximon = \"Piximon\",\r\n    SkullGreymon = \"SkullGreymon\",\r\n    Vademon = \"Vademon\",\r\n}\r\n\r\nexport class Digimon {\r\n    constructor(\r\n        public readonly name: DigimonName,\r\n        public readonly level: Level,\r\n        public readonly evolutionRequirements: EvolutionRequirements,\r\n        public readonly evolutionPath: Array<DigimonName>,\r\n        public readonly digimonBonus?: DigimonName,\r\n        ) {\r\n    }\r\n}","export default class EvolutionRequirements {\r\n    constructor(\r\n        public readonly hp: number,\r\n        public readonly mp: number,\r\n        public readonly offense: number,\r\n        public readonly defense: number,\r\n        public readonly speed: number,\r\n        public readonly brains: number,\r\n        public readonly care: number,\r\n        public readonly weight: number,\r\n        public readonly discipline: number,\r\n        public readonly happiness: number,\r\n        public readonly battles: number,\r\n        public readonly techs: number,\r\n        public readonly minCare: boolean,\r\n        public readonly minBattles: boolean,\r\n    ) {\r\n    }\r\n}\r\n","import EvolutionRequirements from \"./EvolutionRequirements\";\r\nimport { Digimon, DigimonName, Level } from \"./Digimon\";\r\n\r\nexport const digimonList = [\r\n    // Botamon\r\n    new Digimon(\r\n        DigimonName.Botamon,\r\n        Level.Fresh,\r\n        new EvolutionRequirements(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, false, false), \r\n        [DigimonName.Koromon, DigimonName.Sukamon]\r\n    ),\r\n    // Poyomon\r\n    new Digimon(\r\n        DigimonName.Poyomon,\r\n        Level.Fresh,\r\n        new EvolutionRequirements(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, false, false), \r\n        [DigimonName.Tokomon, DigimonName.Sukamon]\r\n    ),\r\n    // Punimon\r\n    new Digimon(\r\n        DigimonName.Punimon,\r\n        Level.Fresh,\r\n        new EvolutionRequirements(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, false, false), \r\n        [DigimonName.Tsunomon, DigimonName.Sukamon]\r\n    ),\r\n    // Yuramon\r\n    new Digimon(\r\n        DigimonName.Yuramon,\r\n        Level.Fresh,\r\n        new EvolutionRequirements(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, false, false), \r\n        [DigimonName.Tanemon, DigimonName.Sukamon]\r\n    ),\r\n\r\n    // Koromon\r\n    new Digimon(\r\n        DigimonName.Koromon,\r\n        Level.InTraining,\r\n        new EvolutionRequirements(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, false, false), \r\n        [DigimonName.Agumon, DigimonName.Gabumon, DigimonName.Kunemon, DigimonName.Sukamon]\r\n    ),\r\n    // Tanemon\r\n    new Digimon(\r\n        DigimonName.Tanemon,\r\n        Level.InTraining,\r\n        new EvolutionRequirements(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, false, false), \r\n        [DigimonName.Palmon, DigimonName.Betamon, DigimonName.Kunemon, DigimonName.Sukamon]\r\n    ),\r\n    // Tokomon\r\n    new Digimon(\r\n        DigimonName.Tokomon,\r\n        Level.InTraining,\r\n        new EvolutionRequirements(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, false, false), \r\n        [DigimonName.Patamon, DigimonName.Biyomon, DigimonName.Kunemon, DigimonName.Sukamon]\r\n    ),\r\n    // Tsunomon\r\n    new Digimon(\r\n        DigimonName.Tsunomon,\r\n        Level.InTraining,\r\n        new EvolutionRequirements(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, false, false), \r\n        [DigimonName.Elecmon, DigimonName.Penguinmon, DigimonName.Kunemon, DigimonName.Sukamon]\r\n    ),\r\n    \r\n    // Agumon\r\n    new Digimon(\r\n        DigimonName.Agumon,\r\n        Level.Rookie,\r\n        new EvolutionRequirements(0, 1000, 0, 0, 0, 0, 3, 20, 0, 50, -1, 28, false, false), \r\n        [DigimonName.Greymon, DigimonName.Meramon, DigimonName.Birdramon, DigimonName.Centarumon, DigimonName.Monochromon, DigimonName.Tyrannomon, DigimonName.Numemon, DigimonName.Nanimon, DigimonName.Sukamon]\r\n    ),\r\n    // Betamon\r\n    new Digimon(\r\n        DigimonName.Betamon,\r\n        Level.Rookie,\r\n        new EvolutionRequirements(10, 10, 0, 1, 0, 0, 0, 15, 0, 0, -2, 0, false, false),\r\n        [DigimonName.Seadramon, DigimonName.Whamon, DigimonName.Shellmon, DigimonName.Coelamon, DigimonName.Numemon, DigimonName.Nanimon, DigimonName.Sukamon],\r\n        /* Bonus */ DigimonName.Tanemon, \r\n    ),\r\n    // Biyomon\r\n    new Digimon(\r\n        DigimonName.Biyomon,\r\n        Level.Rookie,\r\n        new EvolutionRequirements(0, 10, 0, 1, 1, 0, 0, 15, 0, 0, -2, 0, false, false), \r\n        [DigimonName.Birdramon, DigimonName.Airdramon, DigimonName.Kokatorimon, DigimonName.Unimon, DigimonName.Kabuterimon, DigimonName.Numemon, DigimonName.Nanimon, DigimonName.Sukamon],\r\n        /* Bonus */ DigimonName.Tokomon\r\n    ),\r\n    // Elecmon\r\n    new Digimon(\r\n        DigimonName.Elecmon,\r\n        Level.Rookie,\r\n        new EvolutionRequirements(10, 0, 1, 0, 1, 0, 0, 15, 0, 0, -2, 0, false, false), \r\n        [DigimonName.Leomon, DigimonName.Angemon, DigimonName.Bakemon, DigimonName.Kokatorimon, DigimonName.Numemon, DigimonName.Nanimon, DigimonName.Sukamon],\r\n        /* Bonus */ DigimonName.Tsunomon\r\n    ),\r\n    // Gabumon\r\n    new Digimon(\r\n        DigimonName.Gabumon,\r\n        Level.Rookie,\r\n        new EvolutionRequirements(0, 0, 0, 1, 1, 1, 0, 15, 0, 0, -2, 0, false, false), \r\n        [DigimonName.Centarumon, DigimonName.Monochromon, DigimonName.Drimogemon, DigimonName.Tyrannomon, DigimonName.Ogremon, DigimonName.Garurumon, DigimonName.Numemon, DigimonName.Nanimon, DigimonName.Sukamon],\r\n        /* Bonus */ DigimonName.Koromon\r\n    ),\r\n    // Kunemon\r\n    new Digimon(\r\n        DigimonName.Kunemon,\r\n        Level.Rookie,\r\n        new EvolutionRequirements(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, false, false), \r\n        [DigimonName.Bakemon, DigimonName.Kabuterimon, DigimonName.Kuwagamon, DigimonName.Vegiemon, DigimonName.Numemon, DigimonName.Nanimon, DigimonName.Sukamon]\r\n    ),\r\n    // Palmon\r\n    new Digimon(\r\n        DigimonName.Palmon,\r\n        Level.Rookie,\r\n        new EvolutionRequirements(0, 10, 0, 0, 1, 1, 0, 15, 0, 0, -2, 0, false, false), \r\n        [DigimonName.Kuwagamon, DigimonName.Vegiemon, DigimonName.Ninjamon, DigimonName.Whamon, DigimonName.Coelamon, DigimonName.Numemon, DigimonName.Nanimon, DigimonName.Sukamon],\r\n        /* Bonus */ DigimonName.Tanemon\r\n    ),\r\n    // Patamon\r\n    new Digimon(\r\n        DigimonName.Patamon,\r\n        Level.Rookie,\r\n        new EvolutionRequirements(10, 0, 1, 0, 0, 1, 0, 15, 0, 0, -2, 0, false, false), \r\n        [DigimonName.Drimogemon, DigimonName.Tyrannomon, DigimonName.Ogremon, DigimonName.Leomon, DigimonName.Angemon, DigimonName.Unimon, DigimonName.Numemon, DigimonName.Nanimon, DigimonName.Sukamon],\r\n        /* Bonus */ DigimonName.Tokomon\r\n    ),\r\n    // Penguinmon\r\n    new Digimon(\r\n        DigimonName.Penguinmon,\r\n        Level.Rookie,\r\n        new EvolutionRequirements(0, 10, 0, 1, 0, 1, 0, 15, 0, 0, -2, 0, false, false), \r\n        [DigimonName.Whamon, DigimonName.Shellmon, DigimonName.Garurumon, DigimonName.Frigimon, DigimonName.Mojyamon, DigimonName.Numemon, DigimonName.Nanimon, DigimonName.Sukamon],\r\n        /* Bonus */ DigimonName.Tsunomon\r\n    ),\r\n    // Airdramon\r\n    new Digimon(\r\n        DigimonName.Airdramon,\r\n        Level.Champion,\r\n        new EvolutionRequirements(10, 10, 1, 0, 0, 0, 0, 15, 0, 0, -1, 0, false, false), \r\n        [DigimonName.Megadramon, DigimonName.Phoenixmon, DigimonName.Vademon, DigimonName.Sukamon],\r\n        /* Bonus */ DigimonName.Koromon\r\n    ),\r\n    // Angemon\r\n    new Digimon(\r\n        DigimonName.Angemon,\r\n        Level.Champion,\r\n        new EvolutionRequirements(2000, 4000, 200, 400, 200, 400, 5, 40, 95, 0, 30, 30, true, false), \r\n        [DigimonName.Andromon, DigimonName.Phoenixmon, DigimonName.Devimon, DigimonName.Vademon, DigimonName.Sukamon]\r\n    ),\r\n    // Bakemon\r\n    new Digimon(\r\n        DigimonName.Bakemon,\r\n        Level.Champion,\r\n        new EvolutionRequirements(0, 1000, 0, 0, 0, 100, 0, 20, 0, 0, -1, 35, true, false), \r\n        [DigimonName.SkullGreymon, DigimonName.Giromon, DigimonName.Vademon, DigimonName.Sukamon],\r\n        /* Bonus */ DigimonName.Patamon\r\n    ),\r\n    // Birdramon\r\n    new Digimon(\r\n        DigimonName.Birdramon,\r\n        Level.Champion,\r\n        new EvolutionRequirements(0, 0, 0, 0, 100, 0, 3, 20, 0, 0, -1, 35, false, false), \r\n        [DigimonName.Phoenixmon, DigimonName.Vademon, DigimonName.Sukamon],\r\n        /* Bonus */ DigimonName.Biyomon\r\n    ),\r\n    // Centarumon\r\n    new Digimon(\r\n        DigimonName.Centarumon,\r\n        Level.Champion,\r\n        new EvolutionRequirements(0, 0, 0, 0, 0, 100, 3, 30, 60, 0, -1, 28, true, false), \r\n        [DigimonName.Andromon, DigimonName.Giromon, DigimonName.Vademon, DigimonName.Sukamon]\r\n    ),\r\n    // Coelamon\r\n    new Digimon(\r\n        DigimonName.Coelamon,\r\n        Level.Champion,\r\n        new EvolutionRequirements(0, 0, 0, 100, 0, 0, 3, 30, 0, 0, 5, 35, false, true), \r\n        [DigimonName.MegaSeadramon, DigimonName.Vademon, DigimonName.Sukamon]\r\n    ),\r\n    // Devimon\r\n    new Digimon(\r\n        DigimonName.Devimon,\r\n        Level.Champion,\r\n        new EvolutionRequirements(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, false, false), \r\n        [DigimonName.SkullGreymon, DigimonName.Megadramon, DigimonName.Vademon, DigimonName.Sukamon]\r\n    ),\r\n    // Drimogemon\r\n    new Digimon(\r\n        DigimonName.Drimogemon,\r\n        Level.Champion,\r\n        new EvolutionRequirements(0, 0, 100, 0, 0, 0, 3, 40, 0, 50, -1, 28, false, false), \r\n        [DigimonName.MetalGreymon, DigimonName.Vademon, DigimonName.Sukamon]\r\n    ),\r\n    // Frigimon\r\n    new Digimon(\r\n        DigimonName.Frigimon,\r\n        Level.Champion,\r\n        new EvolutionRequirements(0, 1000, 0, 0, 0, 100, 5, 30, 0, 50, -1, 28, true, false), \r\n        [DigimonName.MetalMamemon, DigimonName.Mamemon, DigimonName.Vademon, DigimonName.Sukamon]\r\n    ),\r\n    // Garurumon\r\n    new Digimon(\r\n        DigimonName.Garurumon,\r\n        Level.Champion,\r\n        new EvolutionRequirements(0, 1000, 0, 0, 100, 0, 1, 30, 90, 0, -1, 28, true, false), \r\n        [DigimonName.SkullGreymon, DigimonName.MegaSeadramon, DigimonName.Vademon, DigimonName.Sukamon]\r\n    ),\r\n    // Greymon\r\n    new Digimon(\r\n        DigimonName.Greymon,\r\n        Level.Champion,\r\n        new EvolutionRequirements(0, 0, 100, 100, 100, 100, 1, 30, 90, 0, -1, 35, true, false), \r\n        [DigimonName.MetalGreymon, DigimonName.SkullGreymon, DigimonName.Vademon, DigimonName.Sukamon]\r\n    ),\r\n    // Kabuterimon\r\n    new Digimon(\r\n        DigimonName.Kabuterimon,\r\n        Level.Champion,\r\n        new EvolutionRequirements(1000, 1000, 100, 0, 100, 0, 1, 30, 0, 0, -1, 35, true, false), \r\n        [DigimonName.HKabuterimon, DigimonName.MetalMamemon, DigimonName.Vademon, DigimonName.Sukamon],\r\n        /* Bonus */ DigimonName.Kunemon\r\n    ),\r\n    // Kokatorimon\r\n    new Digimon(\r\n        DigimonName.Kokatorimon,\r\n        Level.Champion,\r\n        new EvolutionRequirements(1000, 0, 0, 0, 0, 0, 3, 30, 0, 0, -1, 28, false, false), \r\n        [DigimonName.Phoenixmon, DigimonName.Piximon, DigimonName.Vademon, DigimonName.Sukamon],\r\n        /* Bonus */ DigimonName.Biyomon\r\n    ),\r\n    // Kuwagamon\r\n    new Digimon(\r\n        DigimonName.Kuwagamon,\r\n        Level.Champion,\r\n        new EvolutionRequirements(1000, 1000, 100, 0, 100, 0, 5, 30, 0, 0, -1, 28, false, false), \r\n        [DigimonName.HKabuterimon, DigimonName.Piximon, DigimonName.Vademon, DigimonName.Sukamon],\r\n        /* Bonus */ DigimonName.Kunemon // Requires \r\n    ),\r\n    // Leomon\r\n    new Digimon(\r\n        DigimonName.Leomon,\r\n        Level.Champion,\r\n        new EvolutionRequirements(0, 0, 100, 0, 100, 100, 1, 20, 0, 0, 10, 35, true, false), \r\n        [DigimonName.Andromon, DigimonName.Mamemon, DigimonName.Vademon, DigimonName.Sukamon]\r\n    ),\r\n    // Meramon\r\n    new Digimon(\r\n        DigimonName.Meramon,\r\n        Level.Champion,\r\n        new EvolutionRequirements(0, 0, 100, 0, 0, 0, 5, 20, 0, 0, 10, 28, false, false), \r\n        [DigimonName.MetalGreymon, DigimonName.Andromon, DigimonName.Vademon, DigimonName.Sukamon]\r\n    ),\r\n    // Mojyamon\r\n    new Digimon(\r\n        DigimonName.Mojyamon,\r\n        Level.Champion,\r\n        new EvolutionRequirements(1000, 0, 0, 0, 0, 0, 5, 20, 0, 0, 5, 28, false, true), \r\n        [DigimonName.SkullGreymon, DigimonName.Mamemon, DigimonName.Vademon, DigimonName.Sukamon]\r\n    ),\r\n    // Monochromon\r\n    new Digimon(\r\n        DigimonName.Monochromon,\r\n        Level.Champion,\r\n        new EvolutionRequirements(1000, 0, 0, 100, 0, 100, 3, 40, 0, 0, 5, 35, true, true), \r\n        [DigimonName.MetalGreymon, DigimonName.MetalMamemon, DigimonName.Vademon, DigimonName.Sukamon]\r\n    ),\r\n    // Nanimon\r\n    new Digimon(\r\n        DigimonName.Nanimon,\r\n        Level.Champion,\r\n        new EvolutionRequirements(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, false, false), \r\n        [DigimonName.Digitamamon, DigimonName.Vademon, DigimonName.Sukamon]\r\n    ),\r\n    // Ninjamon\r\n    new Digimon(\r\n        DigimonName.Ninjamon,\r\n        Level.Champion,\r\n        new EvolutionRequirements(0, 1000, 100, 0, 100, 0, 1, 10, 0, 0, 15, 35, true, false), \r\n        [DigimonName.Piximon, DigimonName.MetalMamemon, DigimonName.Mamemon, DigimonName.Vademon, DigimonName.Sukamon]\r\n    ),\r\n    // Numemon\r\n    new Digimon(\r\n        DigimonName.Numemon,\r\n        Level.Champion,\r\n        new EvolutionRequirements(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, false, false), \r\n        [DigimonName.Monzaemon, DigimonName.Vademon, DigimonName.Sukamon]\r\n    ),\r\n    // Ogremon\r\n    new Digimon(\r\n        DigimonName.Ogremon,\r\n        Level.Champion,\r\n        new EvolutionRequirements(1000, 0, 100, 0, 0, 0, 5, 30, 0, 0, 15, 35, false, false), \r\n        [DigimonName.Andromon, DigimonName.Giromon, DigimonName.Vademon, DigimonName.Sukamon]\r\n    ),\r\n    // Seadramon\r\n    new Digimon(\r\n        DigimonName.Seadramon,\r\n        Level.Champion,\r\n        new EvolutionRequirements(1000, 1000, 0, 0, 0, 0, 3, 30, 0, 0, 5, 28, false, true), \r\n        [DigimonName.Megadramon, DigimonName.MegaSeadramon, DigimonName.Vademon, DigimonName.Sukamon]\r\n    ),\r\n    // Shellmon\r\n    new Digimon(\r\n        DigimonName.Shellmon,\r\n        Level.Champion,\r\n        new EvolutionRequirements(1000, 0, 0, 100, 0, 0, 5, 40, 0, 0, -1, 35, false, false), \r\n        [DigimonName.HKabuterimon, DigimonName.MegaSeadramon, DigimonName.Vademon, DigimonName.Sukamon],\r\n        /* Bonus */ DigimonName.Betamon // Betamon requires the extra bonus stats\r\n    ),\r\n    // Sukamon\r\n    new Digimon(\r\n        DigimonName.Sukamon,\r\n        Level.Champion,\r\n        new EvolutionRequirements(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, false, false), \r\n        [DigimonName.Etemon, DigimonName.Vademon]\r\n    ),\r\n    // Tyrannomon\r\n    new Digimon(\r\n        DigimonName.Tyrannomon,\r\n        Level.Champion,\r\n        new EvolutionRequirements(1000, 0, 0, 100, 0, 0, 5, 30, 0, 0, 5, 28, true, true), \r\n        [DigimonName.MetalGreymon, DigimonName.Megadramon, DigimonName.Vademon, DigimonName.Sukamon]\r\n    ),\r\n    // Unimon\r\n    new Digimon(\r\n        DigimonName.Unimon,\r\n        Level.Champion,\r\n        new EvolutionRequirements(1000, 0, 0, 0, 100, 0, 3, 30, 0, 0, 10, 35, true, false), \r\n        [DigimonName.Giromon, DigimonName.Phoenixmon, DigimonName.Vademon, DigimonName.Sukamon]\r\n    ),\r\n    // Vegiemon\r\n    new Digimon(\r\n        DigimonName.Vegiemon,\r\n        Level.Champion,\r\n        new EvolutionRequirements(0, 1000, 0, 0, 0, 0, 5, 10, 0, 50, -1, 21, false, false), \r\n        [DigimonName.Piximon, DigimonName.Vademon, DigimonName.Sukamon]\r\n    ),\r\n    // Whamon\r\n    new Digimon(\r\n        DigimonName.Whamon,\r\n        Level.Champion,\r\n        new EvolutionRequirements(1000, 0, 0, 0, 0, 100, 5, 40, 60, 0, -1, 28, true, false), \r\n        [DigimonName.MegaSeadramon, DigimonName.Mamemon, DigimonName.Vademon, DigimonName.Sukamon]\r\n    ),\r\n    \r\n    // Andromon\r\n    new Digimon(\r\n        DigimonName.Andromon,\r\n        Level.Ultimate,\r\n        new EvolutionRequirements(0, 1000, 0, 0, 100, 100, 1, 30, 90, 0, -1, 35, true, false), \r\n        [DigimonName.Sukamon]\r\n    ),\r\n    // Digitamamon\r\n    new Digimon(\r\n        DigimonName.Digitamamon,\r\n        Level.Ultimate,\r\n        new EvolutionRequirements(3000, 3000, 400, 400, 400, 300, 0, 10, 0, 0, 100, 49, true, false), \r\n        [DigimonName.Sukamon]\r\n    ),\r\n    // Etemon\r\n    new Digimon(\r\n        DigimonName.Etemon,\r\n        Level.Ultimate,\r\n        new EvolutionRequirements(2000, 3000, 400, 200, 400, 300, 0, 15, 0, 0, 50, 49, true, false), \r\n        []\r\n    ),\r\n    // Giromon\r\n    new Digimon(\r\n        DigimonName.Giromon,\r\n        Level.Ultimate,\r\n        new EvolutionRequirements(0, 0, 400, 0, 300, 400, 15, 5, 0, 95, 100, 35, false, false), \r\n        [DigimonName.Sukamon]\r\n    ),\r\n    // HKabuterimon\r\n    new Digimon(\r\n        DigimonName.HKabuterimon,\r\n        Level.Ultimate,\r\n        new EvolutionRequirements(7000, 0, 400, 600, 400, 0, 5, 55, 0, 0, 0, 40, true, true), \r\n        [DigimonName.Sukamon]\r\n    ),\r\n    // Mamemon\r\n    new Digimon(\r\n        DigimonName.Mamemon,\r\n        Level.Ultimate,\r\n        new EvolutionRequirements(0, 0, 400, 300, 300, 400, 15, 5, 0, 90, -1, 25, false, false), \r\n        [DigimonName.Sukamon]\r\n    ),\r\n    // Megadramon\r\n    new Digimon(\r\n        DigimonName.Megadramon,\r\n        Level.Ultimate,\r\n        new EvolutionRequirements(3000, 5000, 500, 300, 400, 400, 10, 55, 0, 0, 30, 30, true, false), \r\n        [DigimonName.Sukamon]\r\n    ),\r\n    // MegaSeadramon\r\n    new Digimon(\r\n        DigimonName.MegaSeadramon,\r\n        Level.Ultimate,\r\n        new EvolutionRequirements(0, 4000, 500, 400, 0, 400, 5, 30, 0, 0, 0, 40, true, true), \r\n        [DigimonName.Sukamon]\r\n    ),\r\n    // MetalGreymon\r\n    new Digimon(\r\n        DigimonName.MetalGreymon,\r\n        Level.Ultimate,\r\n        new EvolutionRequirements(4000, 3000, 500, 500, 300, 300, 10, 65, 95, 0, 30, 30, true, false), \r\n        [DigimonName.Sukamon]\r\n    ),\r\n    // MetalMamemon\r\n    new Digimon(\r\n        DigimonName.MetalMamemon,\r\n        Level.Ultimate,\r\n        new EvolutionRequirements(0, 0, 500, 400, 400, 400, 15, 10, 0, 95, -1, 30, true, false), \r\n        [DigimonName.Sukamon]\r\n    ),\r\n    // Monzaemon\r\n    new Digimon(\r\n        DigimonName.Monzaemon,\r\n        Level.Ultimate,\r\n        new EvolutionRequirements(3000, 3000, 300, 300, 300, 300, 0, 40, 0, 0, 50, 49, true, false), \r\n        [DigimonName.Sukamon]\r\n    ),\r\n    // Phoenixmon\r\n    new Digimon(\r\n        DigimonName.Phoenixmon,\r\n        Level.Ultimate,\r\n        new EvolutionRequirements(4000, 4000, 0, 0, 400, 600, 3, 30, 100, 0, 0, 40, true, true), \r\n        [DigimonName.Sukamon]\r\n    ),\r\n    // Piximon\r\n    new Digimon(\r\n        DigimonName.Piximon,\r\n        Level.Ultimate,\r\n        new EvolutionRequirements(0, 0, 300, 300, 400, 400, 15, 5, 0, 95, -1, 25, false, false), \r\n        [DigimonName.Sukamon]\r\n    ),\r\n    // SkullGreymon\r\n    new Digimon(\r\n        DigimonName.SkullGreymon,\r\n        Level.Ultimate,\r\n        new EvolutionRequirements(4000, 6000, 400, 400, 200, 500, 10, 30, 0, 0, 40, 45, false, false), \r\n        [DigimonName.Sukamon]\r\n    ),\r\n    // Vademon\r\n    new Digimon(\r\n        DigimonName.Vademon,\r\n        Level.Ultimate,\r\n        new EvolutionRequirements(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, false, false), \r\n        []\r\n    ),\r\n]\r\n\r\nexport function getDigimon(dn: DigimonName) { \r\n    return digimonList.find(d => d.name === dn) as Digimon;\r\n}\r\n\r\nexport const getSpecialDigimonInfo = (dn: DigimonName) => {\r\n    switch(dn) {\r\n        case DigimonName.Devimon:\r\n            return \"Lose a battle with your Angemon while having <50% discipline and you'll have a chance to evolve into this digimon.\";\r\n        case DigimonName.Numemon:\r\n            return \"Make sure you have no other evolution enabled and you'll evolve into this digimon after 96h on the Rookie level.\";\r\n        case DigimonName.Sukamon:\r\n            return \"Fill your virus bar by pooping on the ground\";\r\n        case DigimonName.Nanimon:\r\n            return \"Bring happiness and discipline to 0 and scold your Digimon. The easiest way to do so is praising/scolding and then reducing the last bit of discipline by overfeeding. The fly/flower condition will increase your happiness and prevents you from getting this evolution!\";\r\n        case DigimonName.Vademon:\r\n            return \"Make sure you have no other evolution enabled and you can evolve into this digimon when praising/scolding your Digimon after 240h on the Champion level.\";\r\n        case DigimonName.Kunemon:\r\n            return \"Sleep in Kunemon's bed and you'll have a chance to evolve into this digimon.\"  \r\n        default:\r\n            return false;\r\n    }\r\n};\r\n","import { useState } from \"react\";\r\nimport { Digimon, DigimonName, Level } from \"../models/Digimon\";\r\nimport { digimonList, getDigimon, getSpecialDigimonInfo } from \"../models/DigimonList\";\r\nimport { Table, Alert, Button, Form }  from 'react-bootstrap';\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledTable = styled(Table)`\r\n    max-width: 50%;\r\n`;\r\n// TODO: Allow user to input a list that they've already digivolved\r\n\r\nconst StyledSelect = styled(Form.Select)`\r\n    width: auto;\r\n    display: inline-block;\r\n    margin-bottom: 20px;\r\n`;\r\n\r\nconst StyledButton = styled(Button)`\r\n    margin-top: -5px;\r\n    margin-left: 10px;\r\n`;\r\n\r\nconst FormCheck = styled(Form.Check)`\r\n`;\r\n\r\nconst bonusDigimonEnabled = true; // TODO: make this togglable\r\n\r\nexport default function DigiSlotMachine() {\r\n    const [rolledDigimon, setRolledDigimon] = useState<Digimon>();\r\n    const [currentDigimon, setCurrentDigimon] = useState<Digimon>(getDigimon(DigimonName.Agumon)!);\r\n    const [bonusText, setBonusText] = useState<Array<string>>([]);\r\n    const [showBonusDigimonText, setShowBonusDigimonText] = useState(false);\r\n    const [showSpoilers, setShowSpoilers] = useState(false);\r\n\r\n    function rollDigimon(currentDigimon: Digimon) {\r\n        // Clear the bonus text\r\n        setBonusText([]);\r\n        setShowBonusDigimonText(false);\r\n\r\n        // Digimon are potentials if they have NO digimonBonus\r\n        // OR their digimonBonus matches the currentRookie\r\n        const potentialEvolutions = digimonList\r\n            .filter(dn => currentDigimon.evolutionPath.includes(dn.name));\r\n\r\n        // Get a random digimon from the list of valid evolutions\r\n        const randomDigi = potentialEvolutions[Math.floor(Math.random()*potentialEvolutions.length)];\r\n        \r\n        let bonusTxt = [];\r\n        // If the rolled digimon has special bonus conditions, let the user know\r\n        if (randomDigi.digimonBonus === currentDigimon.name) {\r\n            bonusTxt.push();\r\n            setShowBonusDigimonText(true);\r\n        }\r\n        \r\n        // If the rolled digimon is a \"special\" digimon, let them know how to evolve into it\r\n        const specialDigiInfo = getSpecialDigimonInfo(randomDigi.name);\r\n        if (specialDigiInfo) {\r\n            bonusTxt.push(`This is a special digimon. ${specialDigiInfo}`);\r\n        }\r\n\r\n        // Set the information for the FE\r\n        setBonusText(bonusTxt);\r\n        setRolledDigimon(randomDigi);\r\n\r\n        console.log(`The rolled digimon was ${randomDigi.name}`);\r\n    }\r\n\r\n    // TODO: Sort the rows and push empty values to the bottom\r\n    return <>\r\n        <p>Your current Digimon: </p>\r\n        <StyledSelect name=\"evolutions\" value={currentDigimon.name} onChange={(e: any) => setCurrentDigimon(getDigimon(e.target.value as unknown as DigimonName))}>\r\n            {digimonList.map(digi => (\r\n                <option key={digi.name} value={digi.name}>{Level[digi.level]} - {digi.name}</option>\r\n            ))}\r\n        </StyledSelect>\r\n        <StyledButton variant=\"primary\" onClick={() => rollDigimon(currentDigimon)}>Roll!</StyledButton> \r\n        {bonusDigimonEnabled && showBonusDigimonText && (\r\n            <Alert variant=\"info\">\r\n                <p>Since you're trying to evolve a {currentDigimon.name}, your digimon gets a free bonus point towards this secret digivolution!</p>\r\n            </Alert>\r\n        )}\r\n        {rolledDigimon ? (<StyledTable striped bordered hover>\r\n            <tbody>\r\n                {showSpoilers && <tr><th>Name</th><td>{rolledDigimon?.name}</td></tr>}\r\n                <tr><th style={{ width: '30%' }}>Level</th><td style={{ width: '70%' }}>{Level[rolledDigimon?.level!] || '-'}</td></tr>\r\n                <tr><th>HP</th><td>{rolledDigimon?.evolutionRequirements.hp || '-'}</td></tr>\r\n                <tr><th>MP</th><td>{rolledDigimon?.evolutionRequirements.mp || '-'}</td></tr>\r\n                <tr><th>OFFENSE</th><td>{rolledDigimon?.evolutionRequirements.offense || '-'}</td></tr>\r\n                <tr><th>DEFENSE</th><td>{rolledDigimon?.evolutionRequirements.defense || '-'}</td></tr>\r\n                <tr><th>SPEED</th><td>{rolledDigimon?.evolutionRequirements.speed || '-'}</td></tr>\r\n                <tr><th>BRAINS</th><td>{rolledDigimon?.evolutionRequirements.brains || '-'}</td></tr>\r\n                <tr><th>REQ. CARE MISTAKES</th><td>{rolledDigimon?.evolutionRequirements.care || '-'}</td></tr>\r\n                <tr><th>WEIGHT</th><td>{rolledDigimon?.evolutionRequirements.weight || '-'}</td></tr>\r\n                <tr><th>DISCIPLINE*</th><td>{rolledDigimon?.evolutionRequirements.discipline || '-'}</td></tr>\r\n                <tr><th>HAPPINESS*</th><td>{rolledDigimon?.evolutionRequirements.happiness || '-'}</td></tr>\r\n                <tr><th>BATTLES*</th><td>{rolledDigimon?.evolutionRequirements.battles || '-'}</td></tr>\r\n                <tr><th>TECHS*</th><td>{rolledDigimon?.evolutionRequirements.techs || '-'}</td></tr>\r\n                <tr><th>MINIMUM CARE MISTAKES(?)</th><td>{(rolledDigimon?.evolutionRequirements.minCare && 'Y') || \"N\"}</td></tr>\r\n                <tr><th>MINIMUM BATTLES</th><td>{(rolledDigimon?.evolutionRequirements.minBattles && 'Y') || \"N\"}</td></tr>\r\n                <tr><th>DIGIMON BONUS</th><td>{rolledDigimon?.digimonBonus || \"N/A\"}</td></tr>\r\n            </tbody>\r\n        </StyledTable>) : <p className={'text-info'}>Click the Roll button above to receive a random digimon's evolution targets</p>}\r\n        {bonusText.length > 0 && <><p>Here's the targets for your secret evolution!:</p><Alert variant=\"info\">{bonusText}</Alert></>}\r\n        <FormCheck \r\n            type=\"switch\"\r\n            id=\"spoilers-switch\"\r\n            label=\"Show full digimon details (spoilers!)\"\r\n            value={showSpoilers}\r\n            onClick={() => setShowSpoilers(prev => !prev)}\r\n        />\r\n        <ul>\r\n            <li>Digimon need a total of 3 evo points met in order to digivolve (?)</li>\r\n            <li>*Bonus conditions can substitute one of three main required conditions (Care Mistake, Weight, Stats) to Digivolve.</li>\r\n            <li>Requirements (HP, MP, OFF, DEF, SPEED, BRAINS) are worth 1 point.</li>\r\n            <li>Care mistakes are worth 1 point.</li>\r\n            <li>Weight is worth 1 point.</li>\r\n            <li>Fulfilling any *bonus* condition is worth 1 point, but fulfilling multiple bonuses is still only worth 1 point, but only one bonus condition will count towards your digimon's evolution requirements (meeting two bonus criteria will still only mean 1 point).</li>\r\n        </ul>\r\n        <a href=\"https://pastebin.com/uWKMF3ck\">More here...</a>\r\n    </>;\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport DigiSlotMachine from './components/DigiSlotMachine';\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <div className=\"App\">\r\n      <h1 className='display-4'>Digimon World 1 Evolution Slot Machine!</h1>\r\n      <p className='lead'>This is an evolution / digivolution tool for people who want to play Digimon World 1 without spoilers. Hit the button and you'll be provided random instructions for digivolving your digimon into another.</p>\r\n      <DigiSlotMachine />\r\n    </div>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}